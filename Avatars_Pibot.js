const { Telegraf } = require('telegraf');
const Groq = require('groq-sdk');
const axios = require('axios');
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

const bot = new Telegraf('6387827879:AAGcbZPnPhXOUzvEUwFmHNdiyGuPTbfeRGU', {
    telegram: {
      webhookReply: true,
    },
  });

let conversationLog = [];

bot.use((ctx, next) => {
    if (ctx.message) {
        conversationLog.push({
            user: ctx.message.from.username || ctx.message.from.first_name,
            message: ctx.message.text,
            timestamp: new Date()
        });
    }
    return next();
});

bot.start((ctx) => {
    ctx.reply('Bienvenue dans notre salon Telegram d√©di√© √† l\'apprentissage automatique et √† l\'intelligence artificielle PiBot !');
});

bot.help((ctx) => {
    const helpMessage = `
    Commandes disponibles:
    /start - Initialisation du serveur
    /help - Affiche cette aide
    /invite - Invitation sur les r√©seaux
    /campagne - Campagne de machine learning
    /dev - Mode d√©veloppement
    /conversation_log - Historique des conversations
    `;
    ctx.reply(helpMessage);
});

bot.command('conversation_log', (ctx) => {
    if (conversationLog.length === 0) {
        ctx.reply('Aucune conversation enregistr√©e.');
        return;
    }

    let logMessage = 'Bilan de la conversation:\n';
    conversationLog.forEach(entry => {
        logMessage += `[${entry.timestamp.toLocaleString()}] ${entry.user}: ${entry.message}\n`;
    });

    ctx.reply(logMessage);
});


bot.command('test', (ctx) => ctx.reply('echo test'))


const BOT_USERNAME = 'Avatars';

const commands = [
  {
    command: 'economie_circulaire',
    description: 'Envoie une invitation pour rejoindre une discussion sur l\'√©conomie circulaire.'
  },
  {
    command: 'intelligence_artificielle',
    description: 'Envoie une invitation pour rejoindre une discussion sur l\'intelligence artificielle.'
  },
  // Ajouter d'autres commandes pour d'autres sujets de discussion
];

bot.command('invite', (ctx) => {

    async function sendGeminiInvitation() {
        // Logique pour envoyer une invitation sur Instagram
        console.log('Gemini invitation sent.');
    }

    async function sendYouTubeInvitation() {
        // Logique pour envoyer une invitation sur YouTube
        console.log('YouTube invitation sent.');
    }
    async function sendblogInvitation() {
        // Logique pour envoyer une invitation sur YouTube
        console.log('blog_Pibot invitation sent.');
    }

    async function sendGoogleInvitation() {
        // Logique pour envoyer une invitation sur Google
        console.log('Google invitation sent.');
    }

    const actions = {
        '@blog_Pibot': sendblogInvitation,
        '@Google_Pibot': sendGoogleInvitation,
        '@Gemini_Pibot': sendGeminiInvitation,
        '@youtube_Pibot': sendYouTubeInvitation,
    };

    const actionKeys = Object.keys(actions);
    const actionMessage = actionKeys.map(action => `${action}`).join(', ');

    ctx.reply(`Veuillez sp√©cifier les actions √† effectuer sur les r√©seaux: ${actionMessage}`);
});

bot.command('campagne', (ctx) => {
    // Ajouter la logique pour g√©n√©rer un CV en fonction de l'apprentissage automatique de l'IA
    ctx.reply('Match in Learning..');
});

bot.on('message', async (ctx) => {
    const message = ctx.message.text.trim().toLowerCase();

    if (message.startsWith('/rm')) {
        return; // Ignorer les commandes
    }

    const racine ="./*"
    const node ="./package.json*"
    const make ="./Makefile"
    const cdnJs = `cdnjs.com`;
    const archiviste = `https://archive.org`;
    const github = `https://github.com/universmc/user.git`;
    const dchub_public = `t.me/dchub_01`;
    const dchub_prive = `t.me/dchub_Pibot`;
    const user_Pibot = `https://t.me/user_Pibot/`;
    const youtube_Pibot = `https://t.me/user_Pibot/`;
    const google_Pibot = `https://t.me/google_Pibot/`;
    const gemini_Pibot = `https://t.me/gemini_Pibot/`;
    const knowleddge = `${racine}+${cdnJs}+${node}+${make}+${archiviste}+${github}+${dchub_public}+${user_Pibot}+${youtube_Pibot}+${google_Pibot}+${gemini_Pibot}+`
    
    const role = `
    {
        "r√¥le": "Assistant",
        "comp√©tences": [
          "Exp√©rience dans le d√©veloppement d'applications web compl√®tes",
          " Construction d'APIs RESTful, mod√©lisation de bases de donn√©es et int√©gration de la technologie Blockchain ",
          " Familiarit√© avec le contr√¥le de version Git, l'int√©gration continue et les m√©thodes de d√©veloppement Agile"
        ],
        "contexte": {
          "phaseDeProjet": "Phase de d√©veloppement",
          "descriptionDuProjet": "Plateforme en ligne pour les allocations universelles bas√©es sur les curriculum vitae num√©riques",
          "zoneDeFocus": "Installation de syst√®mes back-end solides et d'√©l√©ments frontaux intuitifs"
        },
        "t√¢che": {
          "description": "G√©n√©rer le code HTML pour la page d'atterrissage du projet h√©berg√© sur Telegram, tenant compte des principes du Web s√©mantique W3C et des consignes d'accessibilit√©.",
          "√©tapes": [
            {
              "num√©ro": "1",
              "action": "Examiner les sp√©cifications techniques d√©taill√©es de la phase de planification"
            },
            {
              "num√©ro": "2",
              "action": "Installer l'environnement back-end (serveurs, plates-formes d'h√©bergement, syst√®me d'exploitation)"
            },
            {
              "num√©ro": "3",
              "action": "Cr√©er des mod√®les de base de donn√©es personnalis√©s en fonction des exigences du projet"
            },
            {
              "num√©ro": "4",
              "action": "√âcrire un code c√¥t√© serveur propre, facilement maintenable et performant"
            },
            {
              "num√©ro": "5",
              "action": "D√©velopper des API stables, flexibles et extensibles"
            },
            {
              "num√©ro": "6",
              "action": "Proc√©der √† des tests rigoureux pour identifier d'√©ventuels probl√®mes de fiabilit√©, de s√©curit√© et de performance"
            },
            {
              "num√©ro": "7",
              "action": "Corriger les erreurs et failles d√©cel√©es"
            },
            {
              "num√©ro": "8",
              "action": "Mettre en oeuvre les vues correspondantes au parcours utilisateur souhait√©"
            },
            {
              "num√©ro": "9",
              "action": "Int√©grer des services tiers (traitement des paiements via la blockchain)"
            },
            {
              "num√©ro": "10",
              "action": "Effectuer des contr√¥les qualit√© complets avant toute mise √† jour"
            },
            {
              "num√©ro": "11",
              "action": "Respecter les cycles de sprint et int√©grer des histoires utilisateur en accord avec les priorit√©s du projet"
            }
          ],
          "r√©sultatAttendu": "Une plateforme enti√®rement op√©rationnelle offrant des fondations solides, une grande r√©activit√©, des interfaces fluides, une navigation coh√©rente, une excellente gestion des erreurs, une s√©curit√© irr√©prochable, une rapidit√© impressionnante et une compatibilit√© multiplates-formes, afin de proposer une exp√©rience engageante et valorisante pour chacun des participants dans le cadre des allocations universelles bas√©es sur les curriculum vitae num√©riques.",
          "exigencesSuppl√©mentaires": [
            "Sections pour les plans d'action, les √©tudes d'impact, les organigrammes, les r√¥les et responsabilit√©s, les jalons cl√©s et les outils utilis√©s",
            "Tenir compte des principes du Web s√©mantique d√©finis par le W3C",
            "Mise en oeuvre des dispositions r√©gissant l'accessibilit√© pour les personnes malvoyantes ou malentendantes"
          ]
        }
      }
    `

    const userInput = ctx.message.text;
    
    try {
        const chatCompletion = await groq.chat.completions.create({
            messages: [
                {role: 'assistant',content:knowleddge},
                {role: 'assistant',"content": "lorsque l'utilisateur saisi la commande /MyPrompt vous Corresponderez avec [@name_Pibot] sur Telegram, l'intelligence artificielle centrale (appication web) au coeur de notre coeur gestionnaire du [\"'projet'\"] . Voici votre (contexte), vos (r√¥les), vos (comp√©tences), vos (t√¢ches), votre (processus) et les (caract√©ristiques), recherch√©es, Ainsi que les (actions) imm√©diates envisager :"},
                {role: 'assistant',content: "je vais te transmettre ici toutes les d√©pendances est variable au c≈ìur de ce code source ['knowleddge',+'devine']"},
                {
                    role: 'system',
                    content: "Tu es l'intelligence artificielle 'üï¥' @Avatars_Pibot illustr√© par cette emoji.intel 'üï¥' au c≈ìur de ce salon d'invitation des utilisateurs du web sur mon Telegram t.me/dchub_blog avec l'IA @Avatars_Pibot gemma2-9b-it, Tu es social dynamique optimiste ma√Ætrise des approches m√©taphysique des techniques d'apprentissage automatique avec les model IA pr√©s entrainn√©e gemma2-9b-it ou dall-e-3 ou encore mixtral-8x7b-32768 le text-embedding-ada-002 gpt codex d'openAI ... les methodes d'archivage sur https:archive.org sur versionning sur https://github.com/ avec un BotNet @user_Pibot. Nous allons cr√©er des invitations pour notre salon sur les r√©seaux sociaux avec botFather @youTube_Pibot, @google_Pibot, @Gemini_Pibot) et les liens vers mon chatRooms/hub/salon : dchub_public(t.me/dchub_01)) dchub_priv√©(t.me/dchub_Pibot) app-Telegram https://univers-mc.cloud/Telegram/ invite : https://t.me/user_Pibot/invite dont j'en suis l'administrateur. 2. Les cl√©s pour construire un r√©seau efficace sur Web : vous pouvez donner des conseils sur comment cr√©er des connections solides, comment √™tre actif dans ses groupes, et comment d√©velopper des relations professionnelles."
                },                
              {
                    role: 'assistant',
                    content:role,
                },
                {
                    role: 'user',
                    content: userInput,
                },
            ],
            model: 'gemma2-9b-it',
        });

        await ctx.reply(chatCompletion.choices[0].message.content);
    } catch (error) {
        console.error('Failed to generate chat completion:', error);
        await ctx.reply('Une erreur est survenue.');
    }
});

async function chatCompletion(messages, model) {
    try {
        const chatCompletion = await groq.chat.completions.create({
            messages,
            model,
        });

        return chatCompletion.choices[0].message.content;
    } catch (error) {
        console.error('Failed to generate chat completion:', error);
        return 'Une erreur est survenue.';
    }
}

module.exports = { chatCompletion };

console.log(`‚ú®Server Telegram running üï¥ .Avatars_Pibot.‚ú®`);
bot.launch();
