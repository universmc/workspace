const fs = require("fs");
const Groq = require("groq-sdk");
const groq = new Groq();

async function main() {
    groq.chat.completions.create({
        // Param√®tres requis
        
        // Les messages constituent la conversation avec l'assistant. Ils d√©finissent le contexte et la requ√™te.
        messages: [
            // D√©finir un message syst√®me optionnel. Cela √©tablit le comportement de l'assistant
            // et peut √™tre utilis√© pour fournir des instructions sp√©cifiques sur la mani√®re dont il doit
            // se comporter tout au long de la conversation.
            {
                role: "system",
                content: "G√©n√®re une documentation sur l'affinage de prompt optimis√© par une intelligence artificielle ü¶â_pi"
            },
            // D√©finir un message de l'assistant pour introduire la documentation ou la r√©ponse.
            {
                role: "assistant",
                content: "Voici la documentation / README.md en question :"
            },
            // D√©finir un message de l'utilisateur pour lequel l'assistant doit r√©pondre.
            {
                role: "user",
                content: "Tr√®s bien, merci. Continue, **Exemple 1: model de prompt pour la geration d'image**"
            }
        ],
        // Le mod√®le de langage qui g√©n√©rera la r√©ponse.
        model: "mixtral-8x7b-32768",

        // Param√®tres optionnels
        
        // Contr√¥le de l'al√©atoire : diminuer le r√©sultat pour avoir moins de compl√©tions al√©atoires.
        // √Ä mesure que la temp√©rature se rapproche de z√©ro, le mod√®le deviendra d√©terministe et r√©p√©titif.
        temperature: 0.9,
        // Le nombre maximum de jetons √† g√©n√©rer. Les requ√™tes peuvent utiliser jusqu'√†
        // 2048 jetons partag√©s entre l'invite et la compl√©tion.
        max_tokens: 1024,
        // Contr√¥le de la diversit√© via l'√©chantillonnage du noyau : 0.5 signifie que la moiti√© de toutes les options
        // pond√©r√©es par la probabilit√© sont consid√©r√©es.
        top_p: 1,
        // Une s√©quence d'arr√™t est une cha√Æne de texte pr√©d√©finie ou sp√©cifi√©e par l'utilisateur qui
        // signale √† l'IA de s'arr√™ter de g√©n√©rer du contenu, assurant que ses r√©ponses
        // restent concentr√©es et concises. Des exemples incluent les marques de ponctuation et
        // des marqueurs comme "[fin]".
        stop: null,
        // Si d√©fini, des deltas de messages partiels seront envoy√©s.
        stream: false
    }).then((chatCompletion)=>{
        // Imprime la compl√©tion retourn√©e par le mod√®le de langage.
        const cssContent = chatCompletion.choices[0]?.message?.content;
        // D√©finit le chemin du fichier de sortie o√π la documentation sera enregistr√©e.
        const outputFilePath = "output/prompt_" + new Date().toISOString().replace(/[-:TZ]/g, "") + ".md";
        // √âcrit le contenu dans le fichier sp√©cifi√©.
        fs.writeFileSync(outputFilePath, cssContent);
        // Affiche un message confirmant que la documentation a √©t√© g√©n√©r√©e et enregistr√©e.
        console.log("Documentation affine prompt g√©n√©r√©e et enregistr√©e dans " + outputFilePath);
    });
}

main();
